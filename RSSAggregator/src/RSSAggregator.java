import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Aaron Zheng
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Extracting title, link, and description from the channel
        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descriptionIndex = getChildElement(channel, "description");
        // Default values in case elements are not found
        String title = "No title available";
        String desc = "No description available";
        String link = "No description available";

        // Retrieving and assigning values if elements are present
        XMLTree channelChild = channel.child(titleIndex);
        if (channelChild.numberOfChildren() > 0) {
            title = channelChild.child(0).label();
        }
        channelChild = channel.child(descriptionIndex);
        if (channelChild.numberOfChildren() > 0) {
            desc = channelChild.child(0).label();
        }
        link = channel.child(linkIndex).child(0).label();

        // Printing the HTML header section with the channel's information
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href='" + link + "'>" + title + "</a></h1>");
        out.println("<p>" + desc + "</p>");
        out.println("<table border='1'>");
        out.println("<tr><th>Date</th><th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // Printing the closing HTML tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // Initializing variables for search
        int x = -1;
        int i = 0;
        boolean fTag = false;
        int numChildren = xml.numberOfChildren();

        // Searching for the tag among the children
        while (i < numChildren && !fTag) {
            fTag = xml.child(i).label().equals(tag);
            i++;
        }
        if (fTag) {
            x = i - 1;
        }

        return x;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Extracting item details
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        int descriptionIndex = getChildElement(item, "description");
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        // Default values for item details
        String date = "No date available";
        String title = "No title available";
        String desc = "No description available";
        String link = "No link available";
        String source = "No source available";
        String sourceUrl = "No source url available";

        // Assigning values if elements are found
        if (pubDateIndex != -1) {
            date = item.child(pubDateIndex).child(0).label();
        }
        XMLTree itemChild = item.child(titleIndex);
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            title = itemChild.child(0).label();
        } else {
            desc = item.child(descriptionIndex).child(0).label();
        }
        if (linkIndex != -1) {
            link = item.child(linkIndex).child(0).label();
        }

        if (sourceIndex != -1) {
            itemChild = item.child(sourceIndex);
            source = itemChild.child(0).label();
            sourceUrl = itemChild.attributeValue("url");
        }

        // Outputting the item details in a table row
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        out.println("<td>");
        if (sourceIndex != -1) {
            out.println("<a href='" + sourceUrl + "'>" + source + "</a>");
        } else {
            out.println("No source available");
        }
        out.println("</td>");

        // Correctly display title or description in the News column
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            out.println("<td><a href='" + link + "'>" + title + "</a></td>");
        } else {
            out.println("<td><a href='" + link + "'>" + desc + "</a><td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        SimpleWriter html = new SimpleWriter1L(file);
        XMLTree xml = new XMLTree1(url);

        if (xml.label().equals("rss")
                && xml.attributeValue("version").equals("2.0")) {
            // Generating the HTML header
            XMLTree channel = xml.child(0);
            outputHeader(channel, html);

            // Processing each item in the feed
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree channelChild = channel.child(i);
                if (channelChild.label().equals("item")) {
                    processItem(channelChild, html);
                }
            }
            // Generating the HTML footer and closing the streams
            outputFooter(html);
        }
        html.close();
    }

    /**
     * Generates an HTML index page based on the content of an XMLTree.
     *
     * @param channel
     *            The XMLTree representing the channel, containing children with
     *            'file' and 'name' attributes.
     * @param indexPage
     *            The SimpleWriter to output the generated HTML content to.
     */
    private static void outIndex(XMLTree channel, SimpleWriter indexPage) {

        //html file to store index page
        indexPage.println("<html>");
        String header = channel.attributeValue("title");
        indexPage.println("<head><title>" + header + "</title></head>");
        indexPage.println("<body><h2>" + header + "</h2>");
        indexPage.println("<ul>");

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree channelChild = channel.child(i);
            String file = channelChild.attributeValue("file");
            String name = channelChild.attributeValue("name");
            indexPage.println(
                    "<li><a href='" + file + "'>" + name + "</a></li>");

        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //Prompt for and read the xml feed
        out.println("Enter the xml feed: ");
        String xmlFeed = in.nextLine();

        out.println(
                "Enter the name of an output file including the .html extension:");
        String outFile = in.nextLine();

        // Parsing the XML feed
        XMLTree feeds = new XMLTree1(xmlFeed);

        // Creating the index page based on the parsed feed
        SimpleWriter indexPage = new SimpleWriter1L(outFile);
        outIndex(feeds, indexPage);

        // Processing each feed item
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            if (feeds.child(i).label().equals("feed")) {
                XMLTree feed = feeds.child(i);
                String urlName = feed.attributeValue("url");
                String fileName = feed.attributeValue("file");
                processFeed(urlName, fileName, out);
            }

        }
        indexPage.println("</ul>");
        indexPage.println("</body>");
        indexPage.println("</html>");

        in.close();
        out.close();

        //http://web.cse.ohio-state.edu/software/2221/web-sw1/assignments/projects/rss-aggregator/feeds.xml

    }

}